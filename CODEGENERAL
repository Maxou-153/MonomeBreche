import tkinter as tk
from tkinter import ttk, messagebox
import time


class InterfacePrincipale:
    def __init__(self, root):
        self.root = root
        self.root.title("Système de Gestion des Capteurs")

        # Création des onglets
        self.tab_control = ttk.Notebook(root)

        self.tab_enfoncement = ttk.Frame(self.tab_control)
        self.tab_pressure = ttk.Frame(self.tab_control)
        self.tab_gyroscope = ttk.Frame(self.tab_control)
        self.tab_piquets = ttk.Frame(self.tab_control)
        self.tab_verin = ttk.Frame(self.tab_control)

        self.tab_control.add(self.tab_enfoncement, text="Jauge Enfoncement")
        self.tab_control.add(self.tab_pressure, text="Pression des Parois")
        self.tab_control.add(self.tab_gyroscope, text="Gyroscope")
        self.tab_control.add(self.tab_piquets, text="Piquets")
        self.tab_control.add(self.tab_verin, text="Vérins")

        self.tab_control.pack(expand=1, fill="both")

        # Initialiser les fonctionnalités dans les onglets
        self.init_jauge_enfoncement(self.tab_enfoncement)
        self.init_pressure_tab(self.tab_pressure)
        self.init_gyroscope_tab(self.tab_gyroscope)
        self.init_piquet_tab(self.tab_piquets)
        self.init_verin_tab(self.tab_verin)

    def init_jauge_enfoncement(self, frame):
        """Initialise l'onglet Jauge Enfoncement."""
        JaugeEnfoncement(frame)

    def init_pressure_tab(self, frame):
        """Initialise l'onglet Pression des Parois."""
        label = tk.Label(frame, text="Évolution de la Pression des Parois", font=("Arial", 16))
        label.pack(pady=10)

    def init_gyroscope_tab(self, frame):
        """Initialise l'onglet Gyroscope."""
        label = tk.Label(frame, text="Inclinaison de la Machine", font=("Arial", 16))
        label.pack(pady=10)

    def init_piquet_tab(self, frame):
        """Initialise l'onglet Piquets."""
        label = tk.Label(frame, text="Compteur de Piquets", font=("Arial", 16))
        label.pack(pady=10)

    def init_verin_tab(self, frame):
        """Initialise l'onglet Vérins."""
        label = tk.Label(frame, text="Contrôle des Vérins", font=("Arial", 16))
        label.pack(pady=10)


class JaugeEnfoncement:
    def __init__(self, frame):
        """Initialise l'interface de la jauge d'enfoncement."""
        self.frame = frame

        # Variables pour la jauge
        self.enfoncement_valeur = tk.DoubleVar(value=0.0)

        # Étiquettes
        label_title = tk.Label(frame, text="Simulation de l'enfoncement", font=("Arial", 16))
        label_title.pack(pady=10)

        self.label_valeur = tk.Label(
            frame, text="Valeur actuelle: 0.0 m", font=("Arial", 14)
        )
        self.label_valeur.pack(pady=10)

        # Jauge de progression
        self.progress = ttk.Progressbar(
            frame, orient="horizontal", length=300, mode="determinate",
            maximum=1.0, variable=self.enfoncement_valeur
        )
        self.progress.pack(pady=20)

        # Bouton pour démarrer l'enfoncement automatique
        start_bouton = tk.Button(
            frame, text="Démarrer", command=self.start_auto_enfoncement, font=("Arial", 14), bg="blue", fg="white"
        )
        start_bouton.pack(pady=10)

        # Bouton de réinitialisation
        reset_bouton = tk.Button(
            frame, text="Réinitialiser", command=self.reset_enfoncement, font=("Arial", 14), bg="red", fg="white"
        )
        reset_bouton.pack(pady=10)

    def auto_enfoncement(self):
        # Enfoncement progressif
        for i in range(101):  # Diviser l'enfoncement en 100 étapes
            self.enfoncement_valeur.set(i / 100)
            self.label_valeur.config(text=f"Valeur actuelle: {i / 100:.2f} m")
            self.frame.update()
            time.sleep(0.05)  # Pause pour simuler l'animation

        # Message lorsque l'enfoncement atteint 1 mètre
        messagebox.showinfo("Piquet enfoncé", "Le Trou est d'1 mètre.")

        # Descente progressive à 0 mètre
        for i in range(100, -1, -1):  # Descente en 100 étapes
            self.enfoncement_valeur.set(i / 100)
            self.label_valeur.config(text=f"Valeur actuelle: {i / 100:.2f} m")
            self.frame.update()
            time.sleep(0.05)

    def start_auto_enfoncement(self):
        self.auto_enfoncement()

    def reset_enfoncement(self):
        # Réinitialise la jauge
        self.enfoncement_valeur.set(0.0)
        self.label_valeur.config(text="Valeur actuelle: 0.0 m")


if __name__ == "__main__":
    root = tk.Tk()
    app = InterfacePrincipale(root)
    root.mainloop()
