import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from matplotlib.widgets import Slider
import time

# Paramètres de la simulation
diametre_roue = 0.6  # Diamètre de la roue en mètres
circumference_roue = np.pi * diametre_roue  # Circonférence en mètres
vitesse_m_s = 1  # Vitesse initiale de déplacement en m/s
distance_par_piquet = 5  # Distance initiale entre piquets en mètres

# État du compteur
distance_parcourue = 0  # Distance totale parcourue
piquet_pose = False  # Indicateur de pose de piquet
compteur_piquets = 0  # Compteur de piquets posés
latence_counter = 0  # Compteur pour la latence
start_time = time.time()  # Chronomètre pour la latence

# Fonction pour mettre à jour le compteur de piquets
def update_compteur(distance_parcourue, distance_par_piquet):
    global piquet_pose, compteur_piquets
    while distance_parcourue >= distance_par_piquet:  # Vérifier si plusieurs piquets doivent être posés
        piquet_pose = True
        compteur_piquets += 1  # Incrémenter le compteur de piquets
        distance_parcourue -= distance_par_piquet  # Réinitialiser la distance parcourue
    piquet_pose = False
    return distance_parcourue

# Création de l'interface graphique
fig, ax = plt.subplots(figsize=(6, 6))
plt.subplots_adjust(bottom=0.35)  # Laisser de l'espace pour les curseurs
ax.axis("equal")  # Maintenir les proportions égales
ax.set_xlim(-1.5, 1.5)
ax.set_ylim(-1.5, 1.5)
ax.axis("off")  # Masquer les axes

# Cercle de la roue
roue = plt.Circle((0, 0), 1, fill=False, color="blue", linewidth=2)
ax.add_artist(roue)

# Barre de progression
progress, = ax.plot([], [], color="green", linewidth=3)

# Texte pour le compteur avec fond blanc
text_piquet = ax.text(0, -1.0, "", fontsize=14, ha="center", color="red", fontweight='bold', bbox=dict(facecolor='white', edgecolor='none', boxstyle='round,pad=0.3'))
text_piquets_total = ax.text(0, -1.2, "", fontsize=14, ha="center", color="black", fontweight='bold', bbox=dict(facecolor='white', edgecolor='none', boxstyle='round,pad=0.3'))

# Curseur pour ajuster la vitesse
ax_vitesse = plt.axes([0.2, 0.15, 0.6, 0.03], facecolor="lightgoldenrodyellow")
slider_vitesse = Slider(ax_vitesse, "Vitesse (m/s)", 0, 7, valinit=vitesse_m_s)

# Curseur pour ajuster la distance entre piquets
ax_distance = plt.axes([0.2, 0.05, 0.6, 0.03], facecolor="lightgoldenrodyellow")
slider_distance = Slider(ax_distance, "Distance par Piquet (m)", 1, 10, valinit=distance_par_piquet)

# Animation pour la simulation
def update(frame):
    global distance_parcourue, vitesse_m_s, compteur_piquets, latence_counter, start_time, distance_par_piquet

    # Mettre à jour les paramètres à partir des sliders
    vitesse_m_s = slider_vitesse.val
    distance_par_piquet = slider_distance.val

    # Si la latence est active, ne pas avancer le cercle
    if latence_counter > 0:
        latence_counter -= 1  # Compter down la latence
        elapsed_time = time.time() - start_time  # Temps écoulé en secondes
        text_piquet.set_text("Latence en cours...")
        return progress, text_piquet, text_piquets_total

    # Calcul de la distance parcourue en fonction du temps et de la vitesse
    distance_parcourue += vitesse_m_s * 0.05  # Incrément par frame (0.05 est l'intervalle en secondes)

    # Mise à jour du compteur de piquets
    distance_parcourue = update_compteur(distance_parcourue, distance_par_piquet)

    # Mise à jour du cercle de progression (représente un tour de roue)
    theta = np.linspace(0, 2 * np.pi * (distance_parcourue / circumference_roue), 100)
    progress.set_data(np.cos(theta), np.sin(theta))

    # Mise à jour du texte pour le piquet
    if piquet_pose:
        text_piquet.set_text("Piquet posé!")
    else:
        text_piquet.set_text("")

    # Mise à jour du texte pour le compteur de piquets
    text_piquets_total.set_text(f"Piquets posés: {compteur_piquets}")

    return progress, text_piquet, text_piquets_total

# Animation avec Matplotlib
ani = FuncAnimation(fig, update, frames=range(1000), interval=50, blit=True)

plt.title("Simulation du Compteur Cyclique pour Pose de Piquets", fontsize=18, fontweight='bold')
plt.show()
