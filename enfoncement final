import tkinter as tk
from tkinter import ttk, messagebox
import time
import openpyxl  # Pour manipuler les fichiers Excel

class JaugeEnfoncement:
    def __init__(self, root):
        # Initialisation de la fenêtre principale
        self.root = root
        self.root.title("Jauge d'enfoncement")

        # Variables pour la jauge et l'état
        self.enfoncement_valeur = tk.DoubleVar(value=0.0)
        self.is_reset = False  # Drapeau pour gérer la réinitialisation
        self.start_time = None  # Temps de départ
        self.row_num = 2  # Compteur pour les lignes Excel (commence à 2 pour ne pas écraser les en-têtes)

        # Créer un fichier Excel et ajouter un titre pour les colonnes
        self.create_excel_file()

        # Étiquettes
        self.label_title = tk.Label(
            self.root, text="Simulation de l'enfoncement", font=("Arial", 16)
        )
        self.label_title.pack(pady=10)

        self.label_valeur = tk.Label(
            self.root, text="Valeur actuelle: 0.0 m", font=("Arial", 14)
        )
        self.label_valeur.pack(pady=10)

        # Jauge de progression
        self.progress = ttk.Progressbar(
            self.root, orient="horizontal", length=300, mode="determinate",
            maximum=1.0, variable=self.enfoncement_valeur
        )
        self.progress.pack(pady=20)

        # Bouton pour démarrer l'enfoncement automatique
        self.start_bouton = tk.Button(
            self.root, text="Démarrer", command=self.start_auto_enfoncement,
            font=("Arial", 14), bg="blue", fg="white"
        )
        self.start_bouton.pack(pady=10)

        # Bouton de réinitialisation
        self.reset_bouton = tk.Button(
            self.root, text="Réinitialiser", command=self.reset_enfoncement,
            font=("Arial", 14), bg="red", fg="white"
        )
        self.reset_bouton.pack(pady=10)

    def create_excel_file(self):
        """
        Crée un fichier Excel avec les en-têtes nécessaires.
        """
        self.workbook = openpyxl.Workbook()
        self.sheet = self.workbook.active
        self.sheet["A1"] = "Temps écoulé (s)"
        self.sheet["B1"] = "Profondeur (m)"
        self.workbook.save("simulation_enfoncement.xlsx")

    def log_data_to_excel(self, time_elapsed, depth):
        """
        Enregistre les données dans le fichier Excel.
        """
        self.sheet[f"A{self.row_num}"] = time_elapsed
        self.sheet[f"B{self.row_num}"] = depth
        self.workbook.save("simulation_enfoncement.xlsx")
        self.row_num += 1  # Passe à la ligne suivante

    def auto_enfoncement(self):
        """
        Simule l'enfoncement progressif vers 1 mètre et met à jour Excel toutes les 0,5 secondes.
        """
        self.is_reset = False  # Réinitialisation du drapeau
        self.start_time = time.time()  # Temps initial pour mesurer la durée

        # Progression vers 1 mètre (100 étapes)
        for i in range(101):
            if self.is_reset:  # Interrompt si "Réinitialiser" est activé
                return
            current_time = time.time() - self.start_time  # Calcul du temps écoulé
            depth = i / 100  # Progression en 100 étapes
            self.enfoncement_valeur.set(depth)  # Met à jour la jauge
            self.label_valeur.config(text=f"Valeur actuelle: {depth:.2f} m")  # Met à jour le texte
            self.log_data_to_excel(current_time, depth)  # Enregistre les données dans Excel
            self.root.update()  # Rafraîchit l'interface graphique
            time.sleep(0.05)  # Pause de 0,5 seconde pour chaque mise à jour

        # Message lorsque la jauge atteint 1 mètre
        if not self.is_reset:  # Vérifie si le processus n'est pas réinitialisé
            messagebox.showinfo("Piquet enfoncé", "Le Trou est d'1 mètre.")

        # Descente progressive à 0 mètre (100 étapes)
        for i in range(100, -1, -1):
            if self.is_reset:  # Interrompt si "Réinitialiser" est activé
                return
            current_time = time.time() - self.start_time  # Temps écoulé
            depth = i / 100  # Descente en 100 étapes
            self.enfoncement_valeur.set(depth)  # Met à jour la jauge
            self.label_valeur.config(text=f"Valeur actuelle: {depth:.2f} m")  # Met à jour le texte
            self.log_data_to_excel(current_time, depth)  # Enregistre les données dans Excel
            self.root.update()  # Rafraîchit l'interface graphique
            time.sleep(0.05)  # Pause de 0,5 seconde pour chaque mise à jour

    def start_auto_enfoncement(self):
        """
        Démarre la simulation d'enfoncement.
        """
        self.auto_enfoncement()

    def reset_enfoncement(self):
        """
        Réinitialise la jauge et relance automatiquement l'animation.
        """
        self.is_reset = True  # Active le drapeau pour interrompre le processus en cours
        self.enfoncement_valeur.set(0.0)  # Remet la jauge à 0
        self.label_valeur.config(text="Valeur actuelle: 0.0 m")  # Met à jour le texte
        self.root.update()  # Rafraîchit l'interface graphique

        # Relance automatiquement l'enfoncement
        self.is_reset = False  # Réinitialise le drapeau pour permettre le redémarrage
        self.start_auto_enfoncement()

if __name__ == "__main__":
    root = tk.Tk()  # Crée la fenêtre principale
    app = JaugeEnfoncement(root)  # Instancie l'application
    root.mainloop()  # Lance la boucle principale de tkinter
